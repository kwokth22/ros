<script type="text/javascript" src="http://cdn.robotwebtools.org/EaselJS/current/easeljs.min.js"></script>
<script type="text/javascript" src="http://cdn.robotwebtools.org/EventEmitter2/current/eventemitter2.min.js"></script>

<script type="text/javascript" src="../js/roslib.min.js"></script>
<script type="text/javascript" src="../js/ros2d.js"></script>
<script type="text/javascript" src="../js/nav2d.js"></script>

<script type="text/javascript">
      // Connect to ROS.
    var ros = new ROSLIB.Ros({
      url : 'ws://localhost:9090'
    });
    //for stop and reset the map function
    function stop(){
        var cmdVel = new ROSLIB.Topic({
        ros : ros,
        name : '/robot_command',
        messageType : 'std_msgs/UInt8'
      });
      console.log("stop");
      var twist1 = new ROSLIB.Message({
        data : 0
      });
      cmdVel.publish(twist1);
    }

    function resetHec(){
        var cmdVel2 = new ROSLIB.Topic({
        ros : ros,
        name : '/syscommand',
        messageType : 'std_msgs/String'
      });
      console.log('reset');
      var twist2 = new ROSLIB.Message({
        data : 'reset'
      });
      cmdVel2.publish(twist2);
    }
    function save(){
        var cmdVel3 = new ROSLIB.Topic({
        ros : ros,
        name : '/syscommand',
        messageType : 'std_msgs/String'
      });
      console.log('save');
      var twist3 = new ROSLIB.Message({
        data : 'savegeotiff'
      });
      cmdVel3.publish(twist3);
    }
  /**
   * Setup all GUI elements when the page is loaded.
   */
  function init() {
    var button = document.getElementById('button');
    var buttonDiv = document.getElementById('buttonDiv');
    buttonDiv.style.display = 'none';

    {{!--// Connect to ROS.
    var ros = new ROSLIB.Ros({
      url : 'ws://localhost:9090'
    });--}}

    // Create the main viewer.
    var viewer = new ROS2D.Viewer({
      divID : 'nav',
      width : 600,
      height : 400
    });
    var zoomView = new ROS2D.ZoomView({
      rootObject: viewer.scene
    });
    
    // Subscribing to a Topic for noticfication
    // ----------------------

    var listener = new ROSLIB.Topic({
        ros : ros,
        //topic name
        name : '/confirm',
        messageType : 'std_msgs/String'
    });

    listener.subscribe(function(message) {
        console.log('Received message on ' + listener.name + ': ' + message.data);
        var element = document.getElementById("dstatus");
        if(message.data == "confirm"){
            console.log("123");
            element.innerHTML= "Delivery status: " + message.data;
            document.getElementById("button-wn-show-preset").click();
        }
        else{
            console.log("456");
            element.innerHTML= "Delivery status: Not finish" ;
        }
        listener.unsubscribe();
    });


    // Setup the nav client with Orientation
    var nav = NAV2D.OccupancyGridClientNav({
      ros : ros,   
      rootObject : viewer.scene,
      {{!--robot_pose : '/slam_out_pose',--}}
      viewer : viewer,
      serverName : '/move_base',
      topic : '/gmapping/map',
      actionName : '/move_base/goal',
      withOrientation : true,
      continuous : true
    });
    //mouse zoom map
    var myimage = viewer.scene.canvas;
    if (myimage.addEventListener) {
    // IE9, Chrome, Safari, Opera
    myimage.addEventListener("mousewheel", MouseWheelHandler, false);
    // Firefox
    myimage.addEventListener("DOMMouseScroll", MouseWheelHandler, false);
    }
  // IE 6/7/8
    else 
      myimage.attachEvent("onmousewheel", MouseWheelHandler);

    var zoomLevel = 30;
    function MouseWheelHandler(e) {
      // cross-browser wheel delta
      var delta = Math.max(-1, Math.min(1, (e.wheelDelta || -e.detail)));
      if(delta > 0) {
        if(zoomLevel > 0) {
          zoomView.zoom(1.5);
          zoomLevel = zoomLevel - 1;
        }
      }
      else {
        if(zoomLevel < 30) {
          zoomView.zoom(1/1.5);
          zoomLevel = zoomLevel + 1;
        }
      }
      e.preventDefault();
      return false;
    }
    function getMousePos(canvas, evt) {
      var rect = canvas.getBoundingClientRect();
      return {
        x: evt.clientX - rect.left,
        y: evt.clientY - rect.top
      };
    }  

    viewer.scene.canvas.addEventListener('mousemove', function(evt) {
          var mousePos = getMousePos(viewer.scene.canvas, evt);
          zoomView.startZoom(mousePos.x, mousePos.y);
        }, false);





    //set the path 
    var listener = new ROSLIB.Topic({
      ros : ros,
      name : '/move_base/NavfnROS/plan',
      messageType : 'nav_msgs/Path'
    });

    listener.subscribe(function(pose){
      var setColor = createjs.Graphics.getRGB(240, 0, 0);
      console.log('Recevie data '+ listener.name+' :'+ pose.poses[0].pose.position.x);
      var path = new ROS2D.PathShape({
          path: pose,
          strokeSize: 0.03,
          strokeColor: setColor
       });
    //add the object into viewer
    viewer.addObject(path);
    });


  }
</script>

<!-- Page Heading/Breadcrumbs -->
<div class="row">
      <div class="col-lg-12">
          <h1 class="page-header">Controller
              <small>Robot Controller</small>
          </h1>
          <ol class="breadcrumb">
              <li><a href="/">Home</a>
              </li>
              <li class="active">Controller</li>
          </ol>
      </div>
</div>

<div class="row">
      <div class="col-md-10">
          <h2>Robot Navigation</h2><small>Clicking at the goal position and pointing into the desired direction</small>
          <div id="buttonDiv">
          <button id="button" onclick="init()">Click to open the map</button>
          </div>
          <div id="nav"></div>
      </div>
      <div class="col-md-5">
        <h2>Stop the robot</h2>
         <button id="stop" type="stop" class="btn btn-primary" onclick="stop()">Stop</button>
      </div>
      <div class="col-md-5">
        <h2>Reset the map</h2>
         <button id="reset" type="reset" class="btn btn-primary" onclick="resetHec()">Reset</button>
      </div>
      <div class="col-md-5">
        <h2>Save the map</h2>
         <button id="reset" type="reset" class="btn btn-primary" onclick="save()">Save</button>
      </div>


      <div class="col-md-5">
         <h2>Store the Goal</h2>
         <form id="goal" name="goal" method="POST" enctype="multipart/form-data">
         <div name="goal" id="goalDiv">
            
         </div>
         {{!--<p id="x">Clicked Goal Poistion X: </p>--}}
         {{!--<p id="y">Clicked Goal Poistion Y: </p>--}}
         <button id="submit" type="submit" class="btn btn-primary" style="display: none;">Submit</button>
         </form>
      </div>
</div>


