<script type="text/javascript" src="http://cdn.robotwebtools.org/EaselJS/current/easeljs.min.js"></script>
<script type="text/javascript" src="http://cdn.robotwebtools.org/EventEmitter2/current/eventemitter2.min.js"></script>

<script type="text/javascript" src="../js/roslib.min.js"></script>
<script type="text/javascript" src="../js/ros2d.js"></script>
<script type="text/javascript" src="../js/nav2d.js"></script>

<script type="text/javascript">
      // Connect to ROS.
    var ros = new ROSLIB.Ros({
      url : 'ws://localhost:9090'
    });
        // Subscribing to a Topic for noticfication
    // ----------------------

    var listener = new ROSLIB.Topic({
        ros : ros,
        //topic name
        name : '/confirm',
        messageType : 'std_msgs/String'
    });

    listener.subscribe(function(message) {
        console.log('Received message on ' + listener.name + ': ' + message.data);
        var element = document.getElementById("dstatus");
        if(message.data == "confirm"){
            console.log("123");
            element.innerHTML= "Delivery status: " + message.data;
            document.getElementById("button-wn-show-preset").click();
        }
        else{
            console.log("456");
            element.innerHTML= "Delivery status: Not finish" ;
        }
        listener.unsubscribe();
    });

    //controller
    function up() {
    var cmdVel = new ROSLIB.Topic({
      ros : ros,
      name : '/robot_command',
      messageType : 'std_msgs/UInt8'
    });
    var twist1 = new ROSLIB.Message({
      data : 76
    });
    var twist2 = new ROSLIB.Message({
      data : 203
    });
    cmdVel.publish(twist1);
    cmdVel.publish(twist2);
  }
  function down() {
    var cmdVel = new ROSLIB.Topic({
      ros : ros,
      name : '/robot_command',
      messageType : 'std_msgs/UInt8'
    });
    var twist1 = new ROSLIB.Message({
      data : 52
    });
    var twist2 = new ROSLIB.Message({
      data : 180
    });
    cmdVel.publish(twist1);
    cmdVel.publish(twist2);
  }
  function rightUp() {
    var cmdVel = new ROSLIB.Topic({
      ros : ros,
      name : '/robot_command',
      messageType : 'std_msgs/UInt8'
    });
    var twist1 = new ROSLIB.Message({
      data : 76
    });
    var twist2 = new ROSLIB.Message({
      data : 210
    });
    cmdVel.publish(twist1);
    cmdVel.publish(twist2);
  }
  function leftUp() {
    var cmdVel = new ROSLIB.Topic({
      ros : ros,
      name : '/robot_command',
      messageType : 'std_msgs/UInt8'
    });
    var twist1 = new ROSLIB.Message({
      data : 85
    });
    var twist2 = new ROSLIB.Message({
      data : 203
    });
    cmdVel.publish(twist1);
    cmdVel.publish(twist2);
  }
  function rightDown() {
    var cmdVel = new ROSLIB.Topic({
      ros : ros,
      name : '/robot_command',
      messageType : 'std_msgs/UInt8'
    });
    var twist1 = new ROSLIB.Message({
      data : 52
    });
    var twist2 = new ROSLIB.Message({
      data : 210
    });
    cmdVel.publish(twist1);
    cmdVel.publish(twist2);
  }
  function leftDown() {
    var cmdVel = new ROSLIB.Topic({
      ros : ros,
      name : '/robot_command',
      messageType : 'std_msgs/UInt8'
    });
    var twist1 = new ROSLIB.Message({
      data : 85
    });
    var twist2 = new ROSLIB.Message({
      data : 180
    });
    cmdVel.publish(twist1);
    cmdVel.publish(twist2);
  }
  function stop() {
    var cmdVel = new ROSLIB.Topic({
      ros : ros,
      name : '/robot_command',
      messageType : 'std_msgs/UInt8'
    });
    var twist1 = new ROSLIB.Message({
      data : 0
    });
    var twist2 = new ROSLIB.Message({
      data : 0
    });
    cmdVel.publish(twist1);
    cmdVel.publish(twist2);
  }

    function resetHec(){
        var cmdVel2 = new ROSLIB.Topic({
        ros : ros,
        name : '/syscommand',
        messageType : 'std_msgs/String'
      });
      console.log('reset');
      var twist2 = new ROSLIB.Message({
        data : 'reset'
      });
      cmdVel2.publish(twist2);
    }
  /**
   * Setup all GUI elements when the page is loaded.
   */
  function init() {
    var button = document.getElementById('button');
    var buttonDiv = document.getElementById('buttonDiv');
    buttonDiv.style.display = 'none';

    // Create the main viewer.
    var viewer = new ROS2D.Viewer({
      divID : 'nav',
      width : 400,
      height : 400
    });

    var zoomView = new ROS2D.ZoomView({
        rootObject: viewer.scene
    });

    // Setup the map client.
    var gridClient = new ROS2D.OccupancyGridClient({
      ros : ros,
      rootObject : viewer.scene,
      topic : '/map',
      // Use this property in case of continuous updates			
      continuous: true
    });

    var myimage = viewer.scene.canvas;//document.getElementById("map");
    if (myimage.addEventListener) {
        // IE9, Chrome, Safari, Opera
        myimage.addEventListener("mousewheel", MouseWheelHandler, false);
        // Firefox
        myimage.addEventListener("DOMMouseScroll", MouseWheelHandler, false);
    }
    // IE 6/7/8
    else myimage.attachEvent("onmousewheel", MouseWheelHandler);
    var zoomLevel = 30;
    function MouseWheelHandler(e) {
        // cross-browser wheel delta
        var delta = Math.max(-1, Math.min(1, (e.wheelDelta || -e.detail)));
        if(delta > 0) {
        if(zoomLevel > 0) {
            zoomView.zoom(1.5);
            zoomLevel = zoomLevel - 1;
        }
        }
        else {
        if(zoomLevel < 30) {
            zoomView.zoom(1/1.5);
            zoomLevel = zoomLevel + 1;
        }
        }
        e.preventDefault();
        return false;
    }
    function getMousePos(canvas, evt) {
        var rect = canvas.getBoundingClientRect();
        return {
        x: evt.clientX - rect.left,
        y: evt.clientY - rect.top
        };
    }
    viewer.scene.canvas.addEventListener('mousemove', function(evt) {
            var mousePos = getMousePos(viewer.scene.canvas, evt);
            zoomView.startZoom(mousePos.x, mousePos.y);
        }, false);

    // var navArrow = new ROS2D.NavigationArrow({
    //     size: 0.3,
    //     strokeSize: 0.1
    // });
    var listener = new ROSLIB.Topic({
      ros : ros,
      name : '/move_base/NavfnROS/plan',
      messageType : 'nav_msgs/Path'
    });

    listener.subscribe(function(pose){
      console.log('Recevie data '+ listener.name+' :'+ pose.poses[0].pose.position.x);
      var setColor = createjs.Graphics.getRGB(240, 0, 0);
      var path = new ROS2D.PathShape({
          path: pose,
          strokeSize: 0.1,
          strokeColor: setColor
       });
      //  var setPath = new ROS2D.PathShape.prototype.setPath({
      //    path: pose
      //  });
      viewer.addObject(path);
      viewer.addObject(navArrow);
    });
    // viewer.scene.add(path);
    // Scale the canvas to fit to the map
    gridClient.on('change', function() {
      viewer.scaleToDimensions(gridClient.currentGrid.width, gridClient.currentGrid.height);
      viewer.shift(gridClient.currentGrid.pose.position.x, gridClient.currentGrid.pose.position.y);
    });
  }
</script>

<!-- Page Heading/Breadcrumbs -->
<div class="row">
      <div class="col-lg-12">
          <h1 class="page-header">Keyboard Controller
              <small>Robot Keyboard Controller</small>
          </h1>
          <ol class="breadcrumb">
              <li><a href="/">Home</a>
              </li>
              <li class="active">Keyboard Controller</li>
          </ol>
      </div>
</div>

<div class="row">
      <div class="col-md-10">
          <h2>Robot Navigation</h2>
          <div id="buttonDiv">
          <button id="button" onclick="init()">Click to open the map</button>
          </div>
          <div id="nav"></div>
      </div>
      <div class="col-md-5">
                <h2>Press any key to control robot</h2>
                <div class="btn-group btn-group-justified">
                    <a href="#" class="btn btn-default" onclick="leftUp()"><div><i class="fa fa-undo" aria-hidden="true"></i></div> Left Up</a>
                    <a href="#" class="btn btn-default" onclick="up()"><div><i class="fa fa-arrow-up" aria-hidden="true"></i></div>Up</a>
                    <a href="#" class="btn btn-default" onclick="rightUp()"><div><i class="fa fa-repeat" aria-hidden="true"></i></div>Right Up</a>
                </div>

                <div class="btn-group btn-group-justified">
                    <style>
                    div#myDiv {
                        -ms-transform: rotate(180deg); /* IE 9 */
                        -webkit-transform: rotate(180deg); /* Safari */
                        transform: rotate(180deg); /* Standard syntax */
                    }
                    </style>
                        <a href="#" class="btn btn-default" onclick="leftDown()"><div id ="myDiv"><i class="fa fa-undo" aria-hidden="true"> </i></div>Left Down</a>
                        <a href="#" class="btn btn-default" onclick="down()"><div><i class="fa fa-arrow-down" aria-hidden="true"></i></div>Down</a>
                        <a href="#" class="btn btn-default" onclick="rightDown()"><div id ="myDiv"><i class="fa fa-repeat" aria-hidden="true"> </i></div>Right Down</a>
                    </div>
                <div class="btn-group btn-group-justified">
                    <a href="#" class="btn btn-default" onclick="stop()"><div><i class="fa fa-stop" aria-hidden="true"></i></div>Stop</a>
                </div>    
      </div>
      <div class="col-md-5">
        <h2>Reset the map</h2>
         <button id="reset" type="reset" class="btn btn-primary" onclick="resetHec()">Reset</button>
      </div>
      <div class="col-md-5">
         <h2>Store the Goal</h2>
         <form id="goal" name="goal" method="POST" enctype="multipart/form-data">
         <div name="goal" id="goalDiv">
            
         </div>
         {{!--<p id="x">Clicked Goal Poistion X: </p>--}}
         {{!--<p id="y">Clicked Goal Poistion Y: </p>--}}
         <button id="submit" type="submit" class="btn btn-primary" style="display: none;">Submit</button>
         </form>
      </div>
</div>


